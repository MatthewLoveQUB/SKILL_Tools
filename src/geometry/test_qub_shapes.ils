(let ((mk qub::makeRegularPolygon))
  (qtest::runSuites
    (qtest::TestSuite ()
      (qtest::TestCase basic_creation
        (qtest::assertIsInstance (mk 8 10) 'qub::RegularPolygon))
      (qtest::TestCase check_length
        (qtest::assertEqual 10 (get_side_length (mk 8 10))))
      (qtest::TestCase check_actually_octagon
        (qtest::assertEqual 8 (get_num_sides (mk 8 10)))))
    ; Check polygon equality
    (qtest::TestSuite ((f qub::equal) 
                       (mk (lambda (x) (qub::makeRegularPolygon 8 x))))
      (qtest::TestCase check_octagons
        (qtest::assertTrue (f (mk 10) (mk 10))))
      (qtest::TestCase different_sides
        (qtest::assertNil (f (mk 10) (qub::makeRegularPolygon 10 10))))
      (qtest::TestCase different_lengths
        (qtest::assertNil (f (mk 10) (mk 20)))))
    ; Perimeter
    (qtest::TestSuite ((f qub::perimeter))
      (qtest::TestCase simple_summation
        (qtest::assertEqual 80 (f (mk 8 10)))))
    ; Circumradius
    (qtest::TestSuite ((f qub::circumradius))
      ; Comparison values taken from here
      ; http://www.cleavebooks.co.uk/scol/caltriag.htm
      (qtest::TestCase ten_triangle
        (qtest::assertAlmostEqual 5.77 (f (mk 3 10)) ?abs_tol 0.1)))
    ; Area
    (qtest::TestSuite ((f qub::area))
      (qtest::TestCase square_area
        (qtest::assertAlmostEqual 100.0 (f (mk 4 10)) ?abs_tol 1p)))
    ; Apothem
    (qtest::TestSuite ((f qub::apothem))
      (qtest::TestCase square_apothem
        (qtest::assertAlmostEqual 5 (f (mk 4 10)) ?rel_tol 0.001)))
    ; Internal Angle
    (qtest::TestSuite ((f qub::interiorAngle))
      (qtest::TestCase square_internal_angle
        (qtest::assertEqual 90 (f (mk 4 10))))
      (qtest::TestCase triangle_internal_angle
        (qtest::assertEqual 60 (f (mk 3 10))))
      (qtest::TestCase octagon_internal_angle
        (qtest::assertEqual 135 (f (mk 8 10)))))
    ; External angle
    (qtest::TestSuite ((f qub::exteriorAngle))
      (qtest::TestCase octagon_external_angle
        (qtest::assertEqual 45 (f (mk 8 10)))))
    ; Apothem to side
    (qtest::TestSuite ((f qub::apothemToSide))
      (qtest::TestCase square_apothem_to_side
        (qtest::assertAlmostEqual 10 (f 5 4) ?rel_tol 0.0001)))
    ; Next co-ordinate
    (qtest::TestSuite ((f qub::nextCoordinate)
                        (ms qub::makeState2D))
      (qtest::TestCase start_east_square
        (let ((shape (mk 4 10))
              ; 270 is facing south
              ; Rotate by 90 as the shape is a square
              ; End pointing east then move
              (state (ms 270 (list 0 0))))
          (let ((end (qub::makeState2D 0 (list 10 0)))
                (x (qub::nextCoordinate shape state 'clockwise)))
            (qtest::assertAlmostEqual end x)))))
    (qtest::TestSuite ((f qub::getCoordinates))
      (qtest::TestCase generate_square
        (let ((expected (list (qub::makePoint2D 0 0)
                              (qub::makePoint2D 0 10)
                              (qub::makePoint2D 10 10)
                              (qub::makePoint2D 10 0)
                              (qub::makePoint2D 0 0)))
              (result (f (mk 4 10))))
          (qtest::assertAlmostEqual expected 
                                    (mapcar get_pos result)
                                    ?abs_tol 1p))))))

