; A point in 2D space with a direction
(defclass qub::State2D ()
  ((angle @initarg angle
          @writer set_angle
          @reader get_angle)
   (pos @initarg pos
        @writer set_pos
        @reader get_pos)))

; Helper methods to create a State2D either using a
; Point2D or just a two element list
(defgeneric qub::makeState2D (angle pos))

(defmethod qub::makeState2D ((angle number) (pos qub::Point2D))
  (makeInstance 'qub::State2D ?angle (qub::fixAngle angle) ?pos pos))
  
(defmethod qub::makeState2D ((angle number) (pos list))
  (makeInstance 'qub::State2D
                ?angle (qub::fixAngle angle)
                ?pos (qub::makePoint2D (car pos) (cadr pos))))

(defmethod printself ((obj qub::State2D))
  (sprintf nil "[State2D Angle: %n Pos: %A]" (get_angle obj) (get_pos obj)))

(qub::eqfn qub::State2D
  (and (qub::almostEqual (get_angle a) (get_angle b) ?abs_tol 1n)
       (qub::equal (get_pos a) (get_pos b))))

(defmethod qub::almostEqual ((a qub::State2D)
                             (b qub::State2D)
                             @key (rel_tol 0)
                                  (abs_tol 0))
  (and (qub::almostEqual (get_angle a) 
                         (get_angle b) 
                         ?rel_tol rel_tol 
                         ?abs_tol abs_tol)
       (qub::almostEqual (get_pos a) 
                         (get_pos b)
                         ?rel_tol rel_tol
                         ?abs_tol abs_tol)))
       
; Moves the state "forward" using the angle specified in the State2D instance
(defgeneric qub::move2D (currentState distance))
(defmethod qub::move2D ((currentState qub::State2D) (distance number))
  (let ((dtr qub::degreesToRadians)
        (x (get_x (get_pos currentState)))
        (y (get_y (get_pos currentState))))
    (let ((dx (times distance (cos (dtr (get_angle currentState)))))
          (dy (times distance (sin (dtr (get_angle currentState))))))
      (qub::makeState2D (get_angle currentState)
                        (qub::makePoint2D (plus x dx) (plus y dy))))))