(qub->create_module 'functional)

; Modules should be infinitely nestable
; Also, implement a function to "import" them
; kind of like "using" in C++ to reduce the number of arrows needed

(defunqub module_test ()
	(display "In a module!"))

(defunqub filter (f lst)
	(let ((result nil))
		(foreach x lst
			(when (f x)
				(pushf x result)))
		(reverse result)))

(defunqub foldl (fn init lst)
	(let ((result init))
		(foreach value lst
			(setq result (fn result value)))
		result))

(defunqub foldr (fn init lst)
	,(qub->foldl ,fn ,init ,(reverse lst)))

(defunqub sum (lst)
	(qub->foldl plus 0 lst))
